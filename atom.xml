<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hezx&#39;s notes</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hezx.github.io/"/>
  <updated>2017-01-01T07:19:44.000Z</updated>
  <id>http://hezx.github.io/</id>
  
  <author>
    <name>hezx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker in Depth (中文)</title>
    <link href="http://hezx.github.io/2016/12/docker-in-depth/"/>
    <id>http://hezx.github.io/2016/12/docker-in-depth/</id>
    <published>2017-01-01T07:05:56.000Z</published>
    <updated>2017-01-01T07:19:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="容器的概念"><a href="#容器的概念" class="headerlink" title="容器的概念"></a>容器的概念</h1><p>一般来说，虚拟机都会有自己的kernel，自己的硬件，这样虚拟机启动的时候需要先做开机自检，启动kernel，启动用户进程等一系列行为，虽然现在电脑运行速度挺快，但是这一系列检查做下来，也要几十秒，也就是虚拟机需要几十秒来启动。</p>
<ul>
<li>重新来理解虚拟机的概念，计算机科学家发现其实我们创建虚拟机也不一定需要模拟硬件的输入和输出，假如宿主机和虚拟机他们的kernel是一致的，就不用做硬件输入输出的搬运工了，只需要做kernel输入输出的搬运工即可，为了有别于硬件层面的虚拟机，这种虚拟机被命名为 操作系统层虚拟化，也被叫做<strong>容器</strong></li>
<li>在虚拟机的系统中，虚拟机认为自己有独立的文件系统，进程系统，内存系统，等等一系列，所以为了让容器接近虚拟机，也需要有独立的文件系统，进程系统，内存系统，等等一系列，为了达成这一目的，主机系统采用的办法是：只要隔离容器不让它看到主机的文件系统，进程系统，内存系统，等等一系列，那么容器系统就是一个接近虚拟机的玩意了</li>
</ul>
<h1 id="进程隔离"><a href="#进程隔离" class="headerlink" title="进程隔离"></a>进程隔离</h1><p>linux实现进程的方法为fork，实现的方式分为两个步骤：</p>
<ol>
<li>在内存中复制一个父进程，得到“子进程”，此时子进程就是父进程上下文的简单克隆，内容完全一致</li>
<li>设置子进程的 pid，parent_pid，以及其他和父进程不一致的内容</li>
</ol>
<p>从进程被制造的步骤可以看出，进程大部分资源和父进程共享，如果需要制造一个看起来像虚拟机的进程，我们需要比普通的进程多做几步。</p>
<ul>
<li>可以自定义rootfs，比如我们把整个ubuntu发行版的可执行文件以及其他文件系统都放在目录/home/admin/ubuntu/ 下，当我们重定义rootfs = /home/admin/ubuntu 后，则该文件地址被印射为 “/“</li>
<li>把自身pid 印射为0，并看不到其他任何的pid，这样自身的pid成为系统内唯一存在pid，看起来就像新启动了系统</li>
<li>用户名隔离，可以把用户名设置为“root”</li>
<li>hostname隔离，可以另取一个hostname，成为新启动进程的hostname</li>
<li>IPC隔离，隔离掉进程之间的互相通信</li>
<li>网络隔离，隔离掉进程和主机之间的网络</li>
</ul>
<p>所以虽然docker帮助我们准备好了rootfs地址，镜像里面的文件，以及各种资源隔离的配置，但是在启动一个容器的时候，它只是调用系统中早已内置的可以隔离资源的方法，而kernel支持这些方法，也是在创建进程的方法上做了一层资源隔离的扩展而已。这就解释了docker启动速度快，因为本质来说容器和进程差别没有想象中的大，共享了很多代码，流程也差的不多。</p>
<h2 id="容器内创建进程"><a href="#容器内创建进程" class="headerlink" title="容器内创建进程"></a>容器内创建进程</h2><p>在fork方法中，第一步就是继承父进程的一切，而这一切包含了父进程已有的资源隔离，所以容器进程创建的进程天然继承容器所有的一切资源隔离，就和虚拟机的pid = 0 的进程创建子进程所拥有的一样。</p>
<h1 id="boot2docker"><a href="#boot2docker" class="headerlink" title="boot2docker"></a>boot2docker</h1><p>Docker虚拟了网络地址空间和文件系统。实际上，它还虚拟了进程ID空间（pid space）等系统数据结构。这些功能是一个叫dockerd的daemon程序借助Linux内核中的<em>control groups</em>（又叫cgroups）功能实现的。dockerd负责执行集装箱；就像VirtualBox负责执行虚拟机一样。</p>
<p>因为cgroups功能只有Linux内核有，所以Docker目前只能运行在Linux上。可是，现在很多开发者都在用Mac。为了能让这些开发者方便的测试自己创作的集装箱镜像，Docker的开发者写了boot2docker——利用VirtualBox虚拟一个Linux主机，并且在上面安装dockerd。而命令行控制程序docker执行在Mac主机上，被配置成和虚拟Linux主机上的dockerd协作。</p>
<p>当我们在Linux主机上启动一个集装箱的时候，我们可以让Docker把主机的某些目录映射成集装箱内的目录。这样集装箱里的程序和主机上的程序共享数据，是一种方便的调试方式。但是在用boot2docker的时候，“主机”不是Mac，而是虚拟Linux主机。此时如果想把Mac上的目录映射到集装箱，先得将其通过VirtualBox映射到Linux主机。</p>
<p>另一个注意事项和端口转发有关。当我们把集装箱内的某个端口映射为主机的某个端口时，只是映射到了虚拟Linux主机；如果想让Mac上的程序能访问，还得把虚拟机端口通过VirtualBox映射成Mac上的端口。这些注意事项，在下文中会有详细解释。</p>
<h1 id="CoreOS"><a href="#CoreOS" class="headerlink" title="CoreOS"></a>CoreOS</h1><p>目前最常用的用来执行Docker集装箱的Linux发行版本既不是Ubuntu、Debian也不是RedHat、Fedora，而是<strong>CoreOS</strong>。这个发行版本根本没有软件包管理程序，所以也不能通过输入某个命令来安装软件(apt-get, yum etc)。但是CoreOS预装了Docker，所以可以制作集装箱镜像，或者下载别人发布的集装箱镜像来执行。</p>
<p>CoreOS和其他Linux发行版本相比，执行效率高、内存耗费省；此外，利用双磁盘分区技术，即便是更新Linux内核也不需要重启。CoreOS还有很多独特之处，使得它在问世后很短的时间里就被Amazon和Google采用。</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://zhuanlan.zhihu.com/p/22382728" target="_blank" rel="external">一篇不一样的docker原理解析 - uncle creepy的文章 - 知乎专栏</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/22403015" target="_blank" rel="external">一篇不一样的docker原理解析 提高篇</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/19902938" target="_blank" rel="external">分布式机器学习的故事：Docker改变世界 - Occam’s Razor - 知乎专栏</a></li>
<li><strong>TODO</strong> <a href="https://zhuanlan.zhihu.com/p/20825896" target="_blank" rel="external">分布式机器学习的故事：Kubernetes和通用机群</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;容器的概念&quot;&gt;&lt;a href=&quot;#容器的概念&quot; class=&quot;headerlink&quot; title=&quot;容器的概念&quot;&gt;&lt;/a&gt;容器的概念&lt;/h1&gt;&lt;p&gt;一般来说，虚拟机都会有自己的kernel，自己的硬件，这样虚拟机启动的时候需要先做开机自检，启动kernel，启动用
    
    </summary>
    
      <category term="Docker" scheme="http://hezx.github.io/categories/Docker/"/>
    
    
      <category term="docker" scheme="http://hezx.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker Fundamentals</title>
    <link href="http://hezx.github.io/2016/12/docker-fundamentals/"/>
    <id>http://hezx.github.io/2016/12/docker-fundamentals/</id>
    <published>2016-12-31T07:26:34.000Z</published>
    <updated>2016-12-31T07:57:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Building-Images"><a href="#Building-Images" class="headerlink" title="Building Images"></a>Building Images</h1><h2 id="Image-layers"><a href="#Image-layers" class="headerlink" title="Image layers"></a>Image layers</h2><p><img src="/images/docker/fund1.png" alt=""></p>
<h2 id="Container-writable-layer"><a href="#Container-writable-layer" class="headerlink" title="Container writable layer"></a>Container writable layer</h2><p><img src="/images/docker/fund2.png" alt=""></p>
<h2 id="Docker-commit"><a href="#Docker-commit" class="headerlink" title="Docker commit"></a>Docker commit</h2><p><img src="/images/docker/fund3.png" alt=""></p>
<h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><p><img src="/images/docker/fund4.png" alt=""></p>
<h2 id="Dockerfile-instructions"><a href="#Dockerfile-instructions" class="headerlink" title="Dockerfile instructions"></a>Dockerfile instructions</h2><p><img src="/images/docker/fund5.png" alt=""></p>
<p><img src="/images/docker/fund6.png" alt=""></p>
<h2 id="Docker-build"><a href="#Docker-build" class="headerlink" title="Docker build"></a>Docker build</h2><p><img src="/images/docker/fund7.png" alt=""></p>
<h2 id="CMD-instructions"><a href="#CMD-instructions" class="headerlink" title="CMD instructions"></a>CMD instructions</h2><p><img src="/images/docker/fund8.png" alt=""></p>
<h2 id="ENTRYPOINT-instructions"><a href="#ENTRYPOINT-instructions" class="headerlink" title="ENTRYPOINT instructions"></a>ENTRYPOINT instructions</h2><p><img src="/images/docker/fund9.png" alt=""></p>
<h1 id="Managing-Images-and-Containers"><a href="#Managing-Images-and-Containers" class="headerlink" title="Managing Images and Containers"></a>Managing Images and Containers</h1><h2 id="Start-and-stop-container"><a href="#Start-and-stop-container" class="headerlink" title="Start and stop container"></a>Start and stop container</h2><p><img src="/images/docker/fund10.png" alt=""></p>
<h2 id="Getting-terminal-access"><a href="#Getting-terminal-access" class="headerlink" title="Getting terminal access"></a>Getting terminal access</h2><p><img src="/images/docker/fund11.png" alt=""></p>
<h2 id="Deleting-container"><a href="#Deleting-container" class="headerlink" title="Deleting container"></a>Deleting container</h2><p><img src="/images/docker/fund12.png" alt=""></p>
<h2 id="Deleting-local-image"><a href="#Deleting-local-image" class="headerlink" title="Deleting local image"></a>Deleting local image</h2><p><img src="/images/docker/fund13.png" alt=""></p>
<h1 id="Distributing-Images-on-Docker-Hub"><a href="#Distributing-Images-on-Docker-Hub" class="headerlink" title="Distributing Images on Docker Hub"></a>Distributing Images on Docker Hub</h1><h2 id="Docker-Hub-repositories"><a href="#Docker-Hub-repositories" class="headerlink" title="Docker Hub repositories"></a>Docker Hub repositories</h2><p><img src="/images/docker/fund14.png" alt=""></p>
<h2 id="Pushing-images-to-Docker-Hub"><a href="#Pushing-images-to-Docker-Hub" class="headerlink" title="Pushing images to Docker Hub"></a>Pushing images to Docker Hub</h2><p><img src="/images/docker/fund15.png" alt=""></p>
<h2 id="Tagging-images"><a href="#Tagging-images" class="headerlink" title="Tagging images"></a>Tagging images</h2><p><img src="/images/docker/fund16.png" alt=""></p>
<h1 id="Docker-Volumes"><a href="#Docker-Volumes" class="headerlink" title="Docker Volumes"></a>Docker Volumes</h1><p><img src="/images/docker/fund17.png" alt=""></p>
<h2 id="Mount-a-volume"><a href="#Mount-a-volume" class="headerlink" title="Mount a volume"></a>Mount a volume</h2><p><img src="/images/docker/fund18.png" alt=""></p>
<h2 id="Volume-in-Dockerfile"><a href="#Volume-in-Dockerfile" class="headerlink" title="Volume in Dockerfile"></a>Volume in Dockerfile</h2><p><img src="/images/docker/fund19.png" alt=""></p>
<h2 id="Uses-of-volumes"><a href="#Uses-of-volumes" class="headerlink" title="Uses of volumes"></a>Uses of volumes</h2><p><img src="/images/docker/fund20.png" alt=""></p>
<h1 id="Basic-Docker-Networking"><a href="#Basic-Docker-Networking" class="headerlink" title="Basic Docker Networking"></a>Basic Docker Networking</h1><h2 id="Mapping-ports"><a href="#Mapping-ports" class="headerlink" title="Mapping ports"></a>Mapping ports</h2><p><img src="/images/docker/fund21.png" alt=""></p>
<h2 id="Automapping-ports"><a href="#Automapping-ports" class="headerlink" title="Automapping ports"></a>Automapping ports</h2><p><img src="/images/docker/fund22.png" alt=""></p>
<h3 id="EXPOSE-instruction"><a href="#EXPOSE-instruction" class="headerlink" title="EXPOSE instruction"></a>EXPOSE instruction</h3><p><img src="/images/docker/fund23.png" alt=""></p>
<h2 id="Linking-containers"><a href="#Linking-containers" class="headerlink" title="Linking containers"></a>Linking containers</h2><p><img src="/images/docker/fund24.png" alt=""></p>
<h3 id="Creating-a-link"><a href="#Creating-a-link" class="headerlink" title="Creating a link"></a>Creating a link</h3><p><img src="/images/docker/fund25.png" alt=""></p>
<h3 id="Uses-of-linking"><a href="#Uses-of-linking" class="headerlink" title="Uses of linking"></a>Uses of linking</h3><p><img src="/images/docker/fund26.png" alt=""></p>
<h1 id="Docker-in-Continuous-Integration"><a href="#Docker-in-Continuous-Integration" class="headerlink" title="Docker in Continuous Integration"></a>Docker in Continuous Integration</h1><h2 id="Traditional-continuous-integration"><a href="#Traditional-continuous-integration" class="headerlink" title="Traditional continuous integration"></a>Traditional continuous integration</h2><p><img src="/images/docker/fund27.png" alt=""></p>
<h2 id="Using-Docker-in-continuous-integration"><a href="#Using-Docker-in-continuous-integration" class="headerlink" title="Using Docker in continuous integration"></a>Using Docker in continuous integration</h2><p><img src="/images/docker/fund28.png" alt=""></p>
<h2 id="Docker-Hub-Auto-Build"><a href="#Docker-Hub-Auto-Build" class="headerlink" title="Docker Hub Auto Build"></a>Docker Hub Auto Build</h2><p><img src="/images/docker/fund29.png" alt=""></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.docker.com/products/docker-toolbox" target="_blank" rel="external">Docker Fundamentals</a> by Johnny Tu.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Building-Images&quot;&gt;&lt;a href=&quot;#Building-Images&quot; class=&quot;headerlink&quot; title=&quot;Building Images&quot;&gt;&lt;/a&gt;Building Images&lt;/h1&gt;&lt;h2 id=&quot;Image-layers&quot;
    
    </summary>
    
      <category term="Docker" scheme="http://hezx.github.io/categories/Docker/"/>
    
    
      <category term="docker" scheme="http://hezx.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Introduction to Docker Concepts and Terms</title>
    <link href="http://hezx.github.io/2016/12/intro-to-docker/"/>
    <id>http://hezx.github.io/2016/12/intro-to-docker/</id>
    <published>2016-12-31T06:49:33.000Z</published>
    <updated>2016-12-31T07:27:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="What-is-Docker"><a href="#What-is-Docker" class="headerlink" title="What is Docker?"></a>What is Docker?</h1><p>Docker is a platform for developing, shipping and running applications using container virtualization technology. </p>
<h2 id="History-lesson"><a href="#History-lesson" class="headerlink" title="History lesson"></a>History lesson</h2><p><img src="/images/docker/intro1.png" alt=""></p>
<p><img src="/images/docker/intro2.png" alt=""></p>
<h2 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h2><p><img src="/images/docker/intro3.png" alt=""></p>
<p><img src="/images/docker/intro4.png" alt=""></p>
<p><img src="/images/docker/intro5.png" alt=""></p>
<h1 id="Concepts-and-Terms"><a href="#Concepts-and-Terms" class="headerlink" title="Concepts and Terms"></a>Concepts and Terms</h1><p><img src="/images/docker/intro6.png" alt=""></p>
<h2 id="Client-and-Daemon"><a href="#Client-and-Daemon" class="headerlink" title="Client and Daemon"></a>Client and Daemon</h2><p><img src="/images/docker/intro7.png" alt=""></p>
<h2 id="Container-and-Image"><a href="#Container-and-Image" class="headerlink" title="Container and Image"></a>Container and Image</h2><p><img src="/images/docker/intro8.png" alt=""></p>
<h2 id="Registry-and-Repository"><a href="#Registry-and-Repository" class="headerlink" title="Registry and Repository"></a>Registry and Repository</h2><p><img src="/images/docker/intro9.png" alt=""></p>
<h1 id="Docker-Image"><a href="#Docker-Image" class="headerlink" title="Docker Image"></a>Docker Image</h1><h2 id="Display-local-images"><a href="#Display-local-images" class="headerlink" title="Display local images"></a>Display local images</h2><p><img src="/images/docker/intro10.png" alt=""></p>
<h2 id="Image-tags"><a href="#Image-tags" class="headerlink" title="Image tags"></a>Image tags</h2><p><img src="/images/docker/intro11.png" alt=""></p>
<h1 id="Docker-Container"><a href="#Docker-Container" class="headerlink" title="Docker Container"></a>Docker Container</h1><h2 id="Creating-a-container"><a href="#Creating-a-container" class="headerlink" title="Creating a container"></a>Creating a container</h2><p><img src="/images/docker/intro12.png" alt=""></p>
<h2 id="Container-with-terminal"><a href="#Container-with-terminal" class="headerlink" title="Container with terminal"></a>Container with terminal</h2><p><img src="/images/docker/intro13.png" alt=""></p>
<h2 id="Container-processes"><a href="#Container-processes" class="headerlink" title="Container processes"></a>Container processes</h2><p><img src="/images/docker/intro14.png" alt=""></p>
<h2 id="Container-ID"><a href="#Container-ID" class="headerlink" title="Container ID"></a>Container ID</h2><p><img src="/images/docker/intro15.png" alt=""></p>
<h2 id="Find-your-containers"><a href="#Find-your-containers" class="headerlink" title="Find your containers"></a>Find your containers</h2><p><img src="/images/docker/intro16.png" alt=""></p>
<h2 id="Funning-in-detached-mode"><a href="#Funning-in-detached-mode" class="headerlink" title="Funning in detached mode"></a>Funning in detached mode</h2><p><img src="/images/docker/intro17.png" alt=""></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.docker.com/products/docker-toolbox" target="_blank" rel="external">Introduction to Docker</a> by Johnny Tu.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;What-is-Docker&quot;&gt;&lt;a href=&quot;#What-is-Docker&quot; class=&quot;headerlink&quot; title=&quot;What is Docker?&quot;&gt;&lt;/a&gt;What is Docker?&lt;/h1&gt;&lt;p&gt;Docker is a platform
    
    </summary>
    
      <category term="Docker" scheme="http://hezx.github.io/categories/Docker/"/>
    
    
      <category term="docker" scheme="http://hezx.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Jupyter Cheatsheet</title>
    <link href="http://hezx.github.io/2016/12/jupyter-cheatsheet/"/>
    <id>http://hezx.github.io/2016/12/jupyter-cheatsheet/</id>
    <published>2016-12-07T19:34:45.000Z</published>
    <updated>2016-12-10T08:06:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Keyboard-Shortcuts"><a href="#Keyboard-Shortcuts" class="headerlink" title="Keyboard Shortcuts"></a>Keyboard Shortcuts</h1><p><img src="/images/mac_keymap.png" alt=""></p>
<h2 id="Command-Mode-press-Esc-to-enable"><a href="#Command-Mode-press-Esc-to-enable" class="headerlink" title="Command Mode (press Esc to enable)"></a>Command Mode (press <em>Esc</em> to enable)</h2><ul>
<li>↩ : enter edit mode</li>
<li>⌃↩ : run cell</li>
<li>⇧↩ : run cell, select below</li>
<li>⌥↩ : run cell, insert below</li>
<li>y : to code</li>
<li>m : to markdown</li>
<li>r : to raw</li>
<li>1/2/3 : to heading 1/2/3…</li>
<li>↑/↓ : select cell above/below</li>
<li>⇧↑/⇧↓ : select multiple cell above/below</li>
<li>a/b : insert cell above/below</li>
<li>x/c : cut/copy selected cell</li>
<li>v : paste cell below</li>
<li>⇧v : paste cell above</li>
<li>z : undo last cell deletion</li>
<li>dd : delete selected cell</li>
<li>⇧m : merge cell below or merge selected cells</li>
<li>⌘s : Save and Checkpoint</li>
<li>l : toggle line numbers</li>
<li>o : toggle output</li>
<li>⇧o : toggle output scrolling</li>
<li>f : find and replace on the code</li>
<li>ii/00 : interrupt/restart kernel</li>
<li>␣/⇧␣ : scroll down/up</li>
</ul>
<h2 id="Edit-Mode-press-↩-to-enable"><a href="#Edit-Mode-press-↩-to-enable" class="headerlink" title="Edit Mode (press ↩ to enable)"></a>Edit Mode (press ↩ to enable)</h2><ul>
<li>⇥ : code completion or indent</li>
<li>⇧⇥ : tooltip</li>
<li>⌘]/⌘[: indent/dedent</li>
<li>⌘a : select all</li>
<li>⌘z : undo</li>
<li>⌘⇧z : redo</li>
<li>⌘↑/⌘↓ : go to cell start/end</li>
<li>⌥←/⌥→ : go one word left/right</li>
<li>⌥⌫/⌥⌦ : delete word before/after</li>
<li>⌃⇧- : split cell</li>
</ul>
<p>Another way to access keyboard shortcuts is to use the command palette: ⌘⇧p. This dialog box helps you run any command by name - useful if you don’t know the keyboard shortcut for an action or if what you want to do does not have a keyboard shortcut.</p>
<h1 id="Plotting-in-Notebook"><a href="#Plotting-in-Notebook" class="headerlink" title="Plotting in Notebook"></a>Plotting in Notebook</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> matplotlib</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</div><div class="line"></div><div class="line">%matplotlib inline</div><div class="line">sns.set_style(<span class="string">"white"</span>)</div><div class="line"></div><div class="line"><span class="comment"># double resolution plot display for Retina screens</span></div><div class="line">%config InlineBackend.figure_format = <span class="string">'retina'</span></div><div class="line"></div><div class="line"><span class="comment"># change display image size</span></div><div class="line">plt.rcParams[<span class="string">"figure.figsize"</span>] = (<span class="number">12</span>,<span class="number">9</span>)</div></pre></td></tr></table></figure>
<h1 id="Magics"><a href="#Magics" class="headerlink" title="Magics"></a>Magics</h1><ul>
<li>List all available jupyter magic commands</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%lsmagic</div></pre></td></tr></table></figure>
<ul>
<li>Executing shell commands</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">!pip install numpy</div><div class="line">!pip list | grep numpy</div></pre></td></tr></table></figure>
<ul>
<li>Suppress output</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># if you don't put semicolon at the end, you'll have output printed</span></div><div class="line">plt.hist(numpy.linspace(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1000</span>)**<span class="number">1.5</span>);</div></pre></td></tr></table></figure>
<ul>
<li>Profilling</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># shows how much time program spent in each function</span></div><div class="line">%prun some_useless_slow_function()</div></pre></td></tr></table></figure>
<h1 id="Code-Import-Reuse"><a href="#Code-Import-Reuse" class="headerlink" title="Code Import/Reuse"></a>Code Import/Reuse</h1><p>Sometimes we want to reuse the functions or classes from other notebooks, or we want to put the utility / helper function into a different notebook to keep the working notebook readable. In both cases, we may need to import code (functions and classes) from another Jupyter notebook, and there are several ways to accomplish that.</p>
<h2 id="Magic-function"><a href="#Magic-function" class="headerlink" title="Magic function"></a>Magic function</h2><p>The simple way is to use the magic function to execute the ipython scripts in a notebook. The option <em>-i</em> will make it run in IPython’s namespace and the variables defined interactively are also included. </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%run -i <span class="string">'notebook_with_shared_code.ipynb'</span></div></pre></td></tr></table></figure>
<h2 id="ipynb-package-py3-only"><a href="#ipynb-package-py3-only" class="headerlink" title="ipynb package - py3 only"></a><em>ipynb</em> package - py3 only</h2><p>The <a href="https://github.com/ipython/ipynb" target="_blank" rel="external">package <em>ipynb</em></a> provides an easy way to explicitly import .pynb files the same way you would import regular .py file. However, this package depends on new machinery introduced in Python 3.4, so at<br>least for now there is no Python 2 support.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install ipynb</div></pre></td></tr></table></figure>
<ul>
<li>Full import</li>
</ul>
<p>All the code in the .ipynb file is executed, and classes/functions/variables in the top level are available for use. If you have a notebook file named <em>server.ipynb</em>, you can import it via:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ipynb.fs.full.server</div><div class="line"><span class="keyword">from</span> ipynb.fs.full.server <span class="keyword">import</span> X, Y, X</div></pre></td></tr></table></figure>
<ul>
<li>Definitions only import</li>
</ul>
<p>you only want to import the functions / classes defined in it - and not the extra statements you have in there. This can be accomplished via </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ipynb.fs.defs.server</div></pre></td></tr></table></figure>
<p>It’ll only execute and make available the following parts of the code in <em>server.ipynb</em>:</p>
<ul>
<li><strong>class</strong> / <strong>function</strong> definitions</li>
<li><strong>import</strong> statements</li>
<li>Assignment statements where the variables being assigned to are ALL_CAPS (assumed to be constants).</li>
</ul>
<p>This skips most computational work and brings in your definitions only, making it easy to reuse functions / classes across similar analyses.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Keyboard-Shortcuts&quot;&gt;&lt;a href=&quot;#Keyboard-Shortcuts&quot; class=&quot;headerlink&quot; title=&quot;Keyboard Shortcuts&quot;&gt;&lt;/a&gt;Keyboard Shortcuts&lt;/h1&gt;&lt;p&gt;&lt;img s
    
    </summary>
    
      <category term="Python" scheme="http://hezx.github.io/categories/Python/"/>
    
    
      <category term="jupyter" scheme="http://hezx.github.io/tags/jupyter/"/>
    
      <category term="python" scheme="http://hezx.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Config the terminal on Mac OS</title>
    <link href="http://hezx.github.io/2016/11/config-mac/"/>
    <id>http://hezx.github.io/2016/11/config-mac/</id>
    <published>2016-11-26T22:17:49.000Z</published>
    <updated>2016-12-31T06:53:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/mac_keymap.png" alt=""></p>
<h1 id="iTerm-2"><a href="#iTerm-2" class="headerlink" title="iTerm 2"></a>iTerm 2</h1><h2 id="Start-iTerm-at-login"><a href="#Start-iTerm-at-login" class="headerlink" title="Start iTerm at login"></a>Start iTerm at login</h2><ul>
<li>Open your “System Preferences”</li>
<li>Navigate to “Users and Groups”</li>
<li>Select your “Login Items”</li>
<li>Click the plus sign to add a new login item (check the box ‘hide’. This way you won’t see the window pop up in your face, but it will be open in the background.)</li>
</ul>
<h2 id="System-wide-hotkey-for-iTerm"><a href="#System-wide-hotkey-for-iTerm" class="headerlink" title="System wide hotkey for iTerm"></a>System wide hotkey for iTerm</h2><ul>
<li>Navigate to the “Keys” settings page on iTerm preferences pane</li>
<li>Set the hotkey “Show/hide iTerm2 with a system-wide hotkey” to whatever you want (eg ⌘+Esc).</li>
</ul>
<h2 id="Keyboard-shortcut"><a href="#Keyboard-shortcut" class="headerlink" title="Keyboard shortcut"></a>Keyboard shortcut</h2><table>
<thead>
<tr>
<th><strong>Function</strong></th>
<th><strong>Shortcut</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Show/hide iTerm2</td>
<td>⌘ + ⌃ + t</td>
</tr>
<tr>
<td>Toggle in/out fullscreen</td>
<td>⌘ + ↩</td>
</tr>
<tr>
<td>Maximize current panel</td>
<td>⌘ + ⇧ + ↩</td>
</tr>
<tr>
<td>Previous/Next tab</td>
<td>⌘ + ← / →</td>
</tr>
<tr>
<td>Go to tab</td>
<td>⌘ + <em>Number</em></td>
</tr>
<tr>
<td>Go to window</td>
<td>⌘ + ⌥ + <em>Number</em></td>
</tr>
<tr>
<td>Go to split pane by order of use</td>
<td>⌘ + ] / [</td>
</tr>
<tr>
<td>Split window horizontally (same profile)</td>
<td>⌘ + D</td>
</tr>
<tr>
<td>Split window vertically (same profile)</td>
<td>⌘ + d</td>
</tr>
<tr>
<td>Close pane/window</td>
<td>⌘ + w</td>
</tr>
<tr>
<td>Search (supports regular expression)</td>
<td>⌘ + f</td>
</tr>
<tr>
<td>Auto-complete used command</td>
<td>⌘ + ;</td>
</tr>
<tr>
<td>Display all tabs and search</td>
<td>⌘ + ⌥ + e</td>
</tr>
<tr>
<td>Highlight mouse location</td>
<td>⌘ + /</td>
</tr>
</tbody>
</table>
<p>See <a href="https://gist.github.com/helger/3070258" target="_blank" rel="external">iTerm 2 cheatsheet</a> and <a href="https://www.zhihu.com/question/27447370/answer/58976209#" target="_blank" rel="external">iterm2有什么酷功能</a> for more shortcuts.</p>
<h1 id="Zsh-and-On-My-Zsh"><a href="#Zsh-and-On-My-Zsh" class="headerlink" title="Zsh and On-My-Zsh"></a>Zsh and On-My-Zsh</h1><p>Run <code>brew install zsh</code> to install Zsh, then change the default shell to zsh:</p>
<ul>
<li>add line <em>/usr/local/bin/zsh</em> to file <em>/etc/shells</em></li>
<li>run <code>chsh -s /usr/local/bin/zsh</code></li>
<li>then install oh-my-zsh</li>
</ul>
<h2 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h2><p>I used the theme called <a href="https://github.com/caiogondim/bullet-train-oh-my-zsh-theme" target="_blank" rel="external">Bullet Train</a>.</p>
<ul>
<li>install Powerline compatible fonts, <a href="https://github.com/Lokaltog/powerline-fonts" target="_blank" rel="external">Vim Powerline patched fonts</a></li>
<li>set both the regular font and the non-ascii font to <em>Hack</em> in iTerm2</li>
<li>download the theme, put the file <em>bullet-train.zsh-theme</em> in <em>$ZSH_CUSTOM/themes/</em>, then configure the theme in your <em>~/.zshrc</em> file <em>ZSH_THEME=”bullet-train”</em></li>
</ul>
<h2 id="Auto-completion"><a href="#Auto-completion" class="headerlink" title="Auto-completion"></a>Auto-completion</h2><p>Zsh can auto-complete file/folder path, commands, and arguments. For example,</p>
<p><img src="/images/zsh_autocomplete.png" alt=""></p>
<p>When the options popped up after the ⇥, hit the ⇥ again and you will be in selection mode. Hit ⇥ to next option, hit ⇧+⇥ to previous option, and use ⌃ + f/b/p/n to choose right/left/above/below option.</p>
<p><img src="/images/zsh_autocomplete2.png" alt=""></p>
<h2 id="Globbing"><a href="#Globbing" class="headerlink" title="Globbing"></a>Globbing</h2><p>Globbing means command line parameter expansion. For example <code>ls *.html</code>.  You can sort and filter by exclusion or inclusion on name, size, permission, owner, creation time, etc.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ls *(.)            # list just regular files</div><div class="line">ls *(/)            # list just directories</div><div class="line">ls -ld *(/om[1,3]) # Show three newest directories. &quot;om&quot; orders by modification. &quot;[1,3]&quot; works like Python slice.</div><div class="line">rm -i *(.L0)       # Remove zero length files, prompt for each file</div><div class="line">ls *(^m0)          # Files not modified today.</div><div class="line">subl **/main.py    # Edit main.py, wherever it is in this directory tree. ** is great.</div><div class="line">ls **/*(.x)        # List all executable files in this tree</div><div class="line">ls *~*.*(.)        # List all files that does not have a dot in the filename</div><div class="line">ls -l */**(Lk+100) # List all files larger than 100kb in this tree</div></pre></td></tr></table></figure>
<h2 id="Global-aliases"><a href="#Global-aliases" class="headerlink" title="Global aliases"></a>Global aliases</h2><p>Global aliases are words that can be used anywhere on the command line, thus you can give certain files, filters or pipes a short name. Some examples:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alias -g NUL=&quot;&gt; /dev/null 2&gt;&amp;1&quot;</div></pre></td></tr></table></figure>
<p>Zsh also has suffix aliases, which means that you can tie a file suffix, let’s say “pdf” to a command, for example xpdf. <code>alias -s pdf=xpdf</code> Now if you just type the name of a pdf file, it will be displayed with xpdf.</p>
<h2 id="Jump"><a href="#Jump" class="headerlink" title="Jump"></a>Jump</h2><p>In Zsh, you can jump to a folder by simply typing in the folder path without the prefix <code>cd</code>, eg <code>..</code> is the same as <code>cd ../</code> Command <code>d</code> will list all folders you have visited in this session, and input the corresponding number can jump to that folder.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ d</div><div class="line">0	~/Dropbox/Websites/hezx.github.io</div><div class="line">1	~/Dropbox/Websites/hezx.github.io/source/_posts</div><div class="line">2	~/Dropbox/Websites/hezx.github.io/source/images</div><div class="line">3	~/Dropbox/Websites/hezx.github.io/source</div><div class="line">4	~</div><div class="line"></div><div class="line">$ 2</div><div class="line">~/Dropbox/Websites/hezx.github.io/source/images</div></pre></td></tr></table></figure>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><p>The history records in Zsh in shared among different sessions. The Zsh also supports hinted search (similar to ⌃+r in Bash). For example, type in command <code>git</code> and then use ↑/ ↓ can search among all previously used <em>git</em> commands. </p>
<h2 id="Awesome-plugins"><a href="#Awesome-plugins" class="headerlink" title="Awesome plugins"></a>Awesome plugins</h2><h3 id="autosuggestions"><a href="#autosuggestions" class="headerlink" title="autosuggestions"></a>autosuggestions</h3><p>It suggests commands as you type, based on command history. Usage examples can be found <a href="https://github.com/zsh-users/zsh-autosuggestions" target="_blank" rel="external">here</a>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions</div><div class="line">plugins=(zsh-autosuggestions)</div></pre></td></tr></table></figure>
<p>As you type commands, you will see a completion offered after the cursor in a muted gray color. If you press the → key with the cursor at the end of the buffer, it will accept the suggestion, replacing the contents of the command line buffer with the suggestion.</p>
<h2 id="More-about-Zsh-or-Oh-My-Zsh"><a href="#More-about-Zsh-or-Oh-My-Zsh" class="headerlink" title="More about Zsh or Oh-My-Zsh"></a>More about Zsh or Oh-My-Zsh</h2><ul>
<li>This <a href="http://reasoniamhere.com/2014/01/11/outrageously-useful-tips-to-master-your-z-shell/" target="_blank" rel="external">post</a> explains how powerful the oh-my-zsh is on <strong>file picking </strong> etc.</li>
<li>This <a href="http://fendrich.se/blog/2012/09/28/no/" target="_blank" rel="external">post</a> lists the benefits from using Zsh instead of default Bash.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/mac_keymap.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;iTerm-2&quot;&gt;&lt;a href=&quot;#iTerm-2&quot; class=&quot;headerlink&quot; title=&quot;iTerm 2&quot;&gt;&lt;/a&gt;iTerm 2&lt;/h1&gt;&lt;h2 
    
    </summary>
    
      <category term="Systems" scheme="http://hezx.github.io/categories/Systems/"/>
    
    
      <category term="MacOS" scheme="http://hezx.github.io/tags/MacOS/"/>
    
      <category term="config" scheme="http://hezx.github.io/tags/config/"/>
    
  </entry>
  
  <entry>
    <title>Build a bolg with Hexo</title>
    <link href="http://hezx.github.io/2016/11/build-bolg-with-hexo/"/>
    <id>http://hezx.github.io/2016/11/build-bolg-with-hexo/</id>
    <published>2016-11-26T21:47:00.000Z</published>
    <updated>2016-12-03T17:47:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><ul>
<li>Install Node.js (LTS v6.9.1)</li>
<li>Install Hexo (hexo-cli@1.0.2)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install -g hexo-cli</div></pre></td></tr></table></figure>
<p>Initialize and install a few userful plugins.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">hexo init</div><div class="line">npm install hexo-generator-index --save</div><div class="line">npm install hexo-generator-archive --save</div><div class="line">npm install hexo-generator-category --save</div><div class="line">npm install hexo-generator-tag --save</div><div class="line">npm install hexo-server --save</div><div class="line">npm install hexo-deployer-git --save</div><div class="line">npm install hexo-deployer-heroku --save</div><div class="line">npm install hexo-deployer-rsync --save</div><div class="line">npm install hexo-deployer-openshift --save</div><div class="line">npm install hexo-renderer-marked@0.2 --save</div><div class="line">npm install hexo-renderer-stylus@0.2 --save</div><div class="line">npm install hexo-generator-feed@1 --save</div><div class="line">npm install hexo-generator-sitemap@1 --save</div></pre></td></tr></table></figure>
<h1 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h1><h2 id="Depoly-to-Github-Pages"><a href="#Depoly-to-Github-Pages" class="headerlink" title="Depoly to Github Pages"></a>Depoly to Github Pages</h2><p>Edit _config.yml file</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line"><span class="code">	type: git</span></div><div class="line"><span class="code">	repository: git@github.com:hezx/hezx.github.io.git</span></div><div class="line"><span class="code">	branch: master</span></div></pre></td></tr></table></figure>
<p>and use the following command to depoly the blog</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy</div></pre></td></tr></table></figure>
<h1 id="Create-tags-categories-pages"><a href="#Create-tags-categories-pages" class="headerlink" title="Create tags/categories pages"></a>Create tags/categories pages</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page tags</div></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">title: tags</div><div class="line">date: 2016-11-25 21:52:48</div><div class="line">type: "tags"</div><div class="line"><span class="section">comments: false</span></div><div class="line">---</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page categories</div></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">title: categories</div><div class="line">date: 2016-11-25 21:52:48</div><div class="line">type: "categories"</div><div class="line"><span class="section">comments: false</span></div><div class="line">---</div></pre></td></tr></table></figure>
<h1 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h1><p>Download the Next theme</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/iissnan/hexo-theme-next next</div></pre></td></tr></table></figure>
<p>Change the theme line in _config.yml as</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: next</div></pre></td></tr></table></figure>
<p>Details about how to config the theme can be found <a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="external">here</a>. </p>
<p>TODO:</p>
<ul>
<li><p>Now I used Local Search, a better approach is to setup the Swiftype engine (see <a href="http://theme-next.iissnan.com/third-party-services.html#swfitype" target="_blank" rel="external">this</a>). </p>
<p>​</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Installation&quot;&gt;&lt;a href=&quot;#Installation&quot; class=&quot;headerlink&quot; title=&quot;Installation&quot;&gt;&lt;/a&gt;Installation&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Install Node.js (LTS v6.
    
    </summary>
    
      <category term="Systems" scheme="http://hezx.github.io/categories/Systems/"/>
    
    
      <category term="Hexo" scheme="http://hezx.github.io/tags/Hexo/"/>
    
      <category term="NexT" scheme="http://hezx.github.io/tags/NexT/"/>
    
  </entry>
  
</feed>
