<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Jupyter Cheatsheet]]></title>
      <url>%2F2016%2F12%2Fjupyter-cheatsheet%2F</url>
      <content type="text"><![CDATA[Keyboard ShortcutsCode Import/ReuseSometimes we want to reuse the functions or classes from other notebooks, or we want to put the utility / helper function into a different notebook to keep the working notebook readable. In both cases, we may need to import code (functions and classes) from another Jupyter notebook, and there are several ways to accomplish that. Magic functionThe simple way is to use the magic function to execute the ipython scripts in a notebook. The option -i will make it run in IPython’s namespace and the variables defined interactively are also included. 1%run -i 'notebook_with_shared_code.ipynb' ipynb packageThe package ipynb provides an easy way to explicitly import .pynb files the same way you would import regular .py file. 1pip install ipynb Full import All the code in the .ipynb file is executed, and classes/functions/variables in the top level are available for use. If you have a notebook file named server.ipynb, you can import it via: 12import ipynb.fs.full.serverfrom ipynb.fs.full.server import X, Y, X Definitions only import you only want to import the functions / classes defined in it - and not the extra statements you have in there. This can be accomplished via 1import ipynb.fs.defs.server It’ll only execute and make available the following parts of the code in server.ipynb: class / function definitions import statements Assignment statements where the variables being assigned to are ALL_CAPS (assumed to be constants). This skips most computational work and brings in your definitions only, making it easy to reuse functions / classes across similar analyses.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Config the terminal on Mac OS]]></title>
      <url>%2F2016%2F11%2Fconfig-mac%2F</url>
      <content type="text"><![CDATA[Key Map in Mac OS ⌘ : Command key ⌃ : Control key ⌫ : Delete key ⌥ : Option or Alt key ⇧ : Shift key ↩ : Return or Enter key ← : Left arrow key → : Right arrow key ↑ : Up arrow key ↓ : Down arrow key iTerm 2Start iTerm at login Open your “System Preferences” Navigate to “Users and Groups” Select your “Login Items” Click the plus sign to add a new login item (check the box ‘hide’. This way you won’t see the window pop up in your face, but it will be open in the background.) System wide hotkey for iTerm Navigate to the “Keys” settings page on iTerm preferences pane Set the hotkey “Show/hide iTerm2 with a system-wide hotkey” to whatever you want (eg ⌘+Esc). Keyboard shortcut Function Shortcut Show/hide iTerm2 ⌘ + ⌃ + t Toggle in/out fullscreen ⌘ + ↩ Maximize current panel ⌘ + ⇧ + ↩ Previous/Next tab ⌘ + ← / → Go to tab ⌘ + Number Go to window ⌘ + ⌥ + Number Go to split pane by order of use ⌘ + ] / [ Split window horizontally (same profile) ⌘ + D Split window vertically (same profile) ⌘ + d Close pane/window ⌘ + w Search (supports regular expression) ⌘ + f Auto-complete used command ⌘ + ; Display all tabs and search ⌘ + ⌥ + e Highlight mouse location ⌘ + / See iTerm 2 cheatsheet and iterm2有什么酷功能 for more shortcuts. Zsh and On-My-ZshRun brew install zsh to install Zsh, then change the default shell to zsh: add line /usr/local/bin/zsh to file /etc/shells run chsh -s /usr/local/bin/zsh then install oh-my-zsh ThemeI used the theme called Bullet Train. install Powerline compatible fonts, Vim Powerline patched fonts set both the regular font and the non-ascii font to Hack in iTerm2 download the theme, put the file bullet-train.zsh-theme in $ZSH_CUSTOM/themes/, then configure the theme in your ~/.zshrc file ZSH_THEME=”bullet-train” Auto-completionZsh can auto-complete file/folder path, commands, and arguments. For example, When the options popped up after the tab, hit the tab again and you will be in selection mode. Hit tab to next option, hit ⇧+tab to previous option, and use ⌃ + f/b/p/n to choose right/left/above/below option. GlobbingGlobbing means command line parameter expansion. For example ls *.html. You can sort and filter by exclusion or inclusion on name, size, permission, owner, creation time, etc. 123456789ls *(.) # list just regular filesls *(/) # list just directoriesls -ld *(/om[1,3]) # Show three newest directories. &quot;om&quot; orders by modification. &quot;[1,3]&quot; works like Python slice.rm -i *(.L0) # Remove zero length files, prompt for each filels *(^m0) # Files not modified today.subl **/main.py # Edit main.py, wherever it is in this directory tree. ** is great.ls **/*(.x) # List all executable files in this treels *~*.*(.) # List all files that does not have a dot in the filenamels -l */**(Lk+100) # List all files larger than 100kb in this tree Global aliasesGlobal aliases are words that can be used anywhere on the command line, thus you can give certain files, filters or pipes a short name. Some examples: 123alias -g L=&quot;|less&quot; # Write L after a command to page through the output.alias -g TL=&apos;| tail -20&apos;alias -g NUL=&quot;&gt; /dev/null 2&gt;&amp;1&quot; Zsh also has suffix aliases, which means that you can tie a file suffix, let’s say “pdf” to a command, for example xpdf. alias -s pdf=xpdf Now if you just type the name of a pdf file, it will be displayed with xpdf. JumpIn Zsh, you can jump to a folder by simply typing in the folder path without the prefix cd, eg .. is the same as cd ../ Command d will list all folders you have visited in this session, and input the corresponding number can jump to that folder. 123456789$ d0 ~/Dropbox/Websites/hezx.github.io1 ~/Dropbox/Websites/hezx.github.io/source/_posts2 ~/Dropbox/Websites/hezx.github.io/source/images3 ~/Dropbox/Websites/hezx.github.io/source4 ~$ 2~/Dropbox/Websites/hezx.github.io/source/images HistoryThe history records in Zsh in shared among different sessions. The Zsh also supports hinted search (similar to ⌃+r in Bash). For example, type in command git and then use ↑/ ↓ can search among all previously used git commands. Awesome pluginsautosuggestionsIt suggests commands as you type, based on command history. Usage examples can be found here. 12git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestionsplugins=(zsh-autosuggestions) As you type commands, you will see a completion offered after the cursor in a muted gray color. If you press the → key with the cursor at the end of the buffer, it will accept the suggestion, replacing the contents of the command line buffer with the suggestion. More about Zsh or Oh-My-Zsh This post explains how powerful the oh-my-zsh is on file picking etc. This post lists the benefits from using Zsh instead of default Bash.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Build a bolg with Hexo]]></title>
      <url>%2F2016%2F11%2Fbuild-bolg-with-hexo%2F</url>
      <content type="text"><![CDATA[Installation Install Node.js (LTS v6.9.1) Install Hexo (hexo-cli@1.0.2) 1sudo npm install -g hexo-cli Initialize and install a few userful plugins. 1234567891011121314hexo initnpm install hexo-generator-index --savenpm install hexo-generator-archive --savenpm install hexo-generator-category --savenpm install hexo-generator-tag --savenpm install hexo-server --savenpm install hexo-deployer-git --savenpm install hexo-deployer-heroku --savenpm install hexo-deployer-rsync --savenpm install hexo-deployer-openshift --savenpm install hexo-renderer-marked@0.2 --savenpm install hexo-renderer-stylus@0.2 --savenpm install hexo-generator-feed@1 --savenpm install hexo-generator-sitemap@1 --save ConfigurationDepoly to Github PagesEdit _config.yml file 1234deploy: type: git repository: git@github.com:hezx/hezx.github.io.git branch: master and use the following command to depoly the blog 1hexo deploy Create tags/categories pages1hexo new page tags 12345title: tagsdate: 2016-11-25 21:52:48type: "tags"comments: false--- 1hexo new page categories 12345title: categoriesdate: 2016-11-25 21:52:48type: "categories"comments: false--- ThemeDownload the Next theme 1git clone https://github.com/iissnan/hexo-theme-next next Change the theme line in _config.yml as 1theme: next Details about how to config the theme can be found here. TODO: Now I used Local Search, a better approach is to setup the Swiftype engine (see this). ​]]></content>
    </entry>

    
  
  
</search>
