<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Docker in Depth (中文)]]></title>
      <url>%2F2016%2F12%2Fdocker-in-depth%2F</url>
      <content type="text"><![CDATA[容器的概念一般来说，虚拟机都会有自己的kernel，自己的硬件，这样虚拟机启动的时候需要先做开机自检，启动kernel，启动用户进程等一系列行为，虽然现在电脑运行速度挺快，但是这一系列检查做下来，也要几十秒，也就是虚拟机需要几十秒来启动。 重新来理解虚拟机的概念，计算机科学家发现其实我们创建虚拟机也不一定需要模拟硬件的输入和输出，假如宿主机和虚拟机他们的kernel是一致的，就不用做硬件输入输出的搬运工了，只需要做kernel输入输出的搬运工即可，为了有别于硬件层面的虚拟机，这种虚拟机被命名为 操作系统层虚拟化，也被叫做容器 在虚拟机的系统中，虚拟机认为自己有独立的文件系统，进程系统，内存系统，等等一系列，所以为了让容器接近虚拟机，也需要有独立的文件系统，进程系统，内存系统，等等一系列，为了达成这一目的，主机系统采用的办法是：只要隔离容器不让它看到主机的文件系统，进程系统，内存系统，等等一系列，那么容器系统就是一个接近虚拟机的玩意了 进程隔离linux实现进程的方法为fork，实现的方式分为两个步骤： 在内存中复制一个父进程，得到“子进程”，此时子进程就是父进程上下文的简单克隆，内容完全一致 设置子进程的 pid，parent_pid，以及其他和父进程不一致的内容 从进程被制造的步骤可以看出，进程大部分资源和父进程共享，如果需要制造一个看起来像虚拟机的进程，我们需要比普通的进程多做几步。 可以自定义rootfs，比如我们把整个ubuntu发行版的可执行文件以及其他文件系统都放在目录/home/admin/ubuntu/ 下，当我们重定义rootfs = /home/admin/ubuntu 后，则该文件地址被印射为 “/“ 把自身pid 印射为0，并看不到其他任何的pid，这样自身的pid成为系统内唯一存在pid，看起来就像新启动了系统 用户名隔离，可以把用户名设置为“root” hostname隔离，可以另取一个hostname，成为新启动进程的hostname IPC隔离，隔离掉进程之间的互相通信 网络隔离，隔离掉进程和主机之间的网络 所以虽然docker帮助我们准备好了rootfs地址，镜像里面的文件，以及各种资源隔离的配置，但是在启动一个容器的时候，它只是调用系统中早已内置的可以隔离资源的方法，而kernel支持这些方法，也是在创建进程的方法上做了一层资源隔离的扩展而已。这就解释了docker启动速度快，因为本质来说容器和进程差别没有想象中的大，共享了很多代码，流程也差的不多。 容器内创建进程在fork方法中，第一步就是继承父进程的一切，而这一切包含了父进程已有的资源隔离，所以容器进程创建的进程天然继承容器所有的一切资源隔离，就和虚拟机的pid = 0 的进程创建子进程所拥有的一样。 boot2dockerDocker虚拟了网络地址空间和文件系统。实际上，它还虚拟了进程ID空间（pid space）等系统数据结构。这些功能是一个叫dockerd的daemon程序借助Linux内核中的control groups（又叫cgroups）功能实现的。dockerd负责执行集装箱；就像VirtualBox负责执行虚拟机一样。 因为cgroups功能只有Linux内核有，所以Docker目前只能运行在Linux上。可是，现在很多开发者都在用Mac。为了能让这些开发者方便的测试自己创作的集装箱镜像，Docker的开发者写了boot2docker——利用VirtualBox虚拟一个Linux主机，并且在上面安装dockerd。而命令行控制程序docker执行在Mac主机上，被配置成和虚拟Linux主机上的dockerd协作。 当我们在Linux主机上启动一个集装箱的时候，我们可以让Docker把主机的某些目录映射成集装箱内的目录。这样集装箱里的程序和主机上的程序共享数据，是一种方便的调试方式。但是在用boot2docker的时候，“主机”不是Mac，而是虚拟Linux主机。此时如果想把Mac上的目录映射到集装箱，先得将其通过VirtualBox映射到Linux主机。 另一个注意事项和端口转发有关。当我们把集装箱内的某个端口映射为主机的某个端口时，只是映射到了虚拟Linux主机；如果想让Mac上的程序能访问，还得把虚拟机端口通过VirtualBox映射成Mac上的端口。这些注意事项，在下文中会有详细解释。 CoreOS目前最常用的用来执行Docker集装箱的Linux发行版本既不是Ubuntu、Debian也不是RedHat、Fedora，而是CoreOS。这个发行版本根本没有软件包管理程序，所以也不能通过输入某个命令来安装软件(apt-get, yum etc)。但是CoreOS预装了Docker，所以可以制作集装箱镜像，或者下载别人发布的集装箱镜像来执行。 CoreOS和其他Linux发行版本相比，执行效率高、内存耗费省；此外，利用双磁盘分区技术，即便是更新Linux内核也不需要重启。CoreOS还有很多独特之处，使得它在问世后很短的时间里就被Amazon和Google采用。 Reference 一篇不一样的docker原理解析 - uncle creepy的文章 - 知乎专栏 一篇不一样的docker原理解析 提高篇 分布式机器学习的故事：Docker改变世界 - Occam’s Razor - 知乎专栏 TODO 分布式机器学习的故事：Kubernetes和通用机群]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Docker Fundamentals]]></title>
      <url>%2F2016%2F12%2Fdocker-fundamentals%2F</url>
      <content type="text"><![CDATA[Building ImagesImage layers Container writable layer Docker commit Dockerfile Dockerfile instructions Docker build CMD instructions ENTRYPOINT instructions Managing Images and ContainersStart and stop container Getting terminal access Deleting container Deleting local image Distributing Images on Docker HubDocker Hub repositories Pushing images to Docker Hub Tagging images Docker Volumes Mount a volume Volume in Dockerfile Uses of volumes Basic Docker NetworkingMapping ports Automapping ports EXPOSE instruction Linking containers Creating a link Uses of linking Docker in Continuous IntegrationTraditional continuous integration Using Docker in continuous integration Docker Hub Auto Build ReferenceDocker Fundamentals by Johnny Tu.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Introduction to Docker Concepts and Terms]]></title>
      <url>%2F2016%2F12%2Fintro-to-docker%2F</url>
      <content type="text"><![CDATA[What is Docker?Docker is a platform for developing, shipping and running applications using container virtualization technology. History lesson Container Concepts and Terms Client and Daemon Container and Image Registry and Repository Docker ImageDisplay local images Image tags Docker ContainerCreating a container Container with terminal Container processes Container ID Find your containers Funning in detached mode ReferenceIntroduction to Docker by Johnny Tu.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Jupyter Cheatsheet]]></title>
      <url>%2F2016%2F12%2Fjupyter-cheatsheet%2F</url>
      <content type="text"><![CDATA[Keyboard Shortcuts Command Mode (press Esc to enable) ↩ : enter edit mode ⌃↩ : run cell ⇧↩ : run cell, select below ⌥↩ : run cell, insert below y : to code m : to markdown r : to raw 1/2/3 : to heading 1/2/3… ↑/↓ : select cell above/below ⇧↑/⇧↓ : select multiple cell above/below a/b : insert cell above/below x/c : cut/copy selected cell v : paste cell below ⇧v : paste cell above z : undo last cell deletion dd : delete selected cell ⇧m : merge cell below or merge selected cells ⌘s : Save and Checkpoint l : toggle line numbers o : toggle output ⇧o : toggle output scrolling f : find and replace on the code ii/00 : interrupt/restart kernel ␣/⇧␣ : scroll down/up Edit Mode (press ↩ to enable) ⇥ : code completion or indent ⇧⇥ : tooltip ⌘]/⌘[: indent/dedent ⌘a : select all ⌘z : undo ⌘⇧z : redo ⌘↑/⌘↓ : go to cell start/end ⌥←/⌥→ : go one word left/right ⌥⌫/⌥⌦ : delete word before/after ⌃⇧- : split cell Another way to access keyboard shortcuts is to use the command palette: ⌘⇧p. This dialog box helps you run any command by name - useful if you don’t know the keyboard shortcut for an action or if what you want to do does not have a keyboard shortcut. Plotting in Notebook123456789101112import matplotlibimport matplotlib.pyplot as pltimport seaborn as sns%matplotlib inlinesns.set_style("white")# double resolution plot display for Retina screens%config InlineBackend.figure_format = 'retina'# change display image sizeplt.rcParams["figure.figsize"] = (12,9) Magics List all available jupyter magic commands 1%lsmagic Executing shell commands 12!pip install numpy!pip list | grep numpy Suppress output 12# if you don't put semicolon at the end, you'll have output printedplt.hist(numpy.linspace(0, 1, 1000)**1.5); Profilling 12# shows how much time program spent in each function%prun some_useless_slow_function() Code Import/ReuseSometimes we want to reuse the functions or classes from other notebooks, or we want to put the utility / helper function into a different notebook to keep the working notebook readable. In both cases, we may need to import code (functions and classes) from another Jupyter notebook, and there are several ways to accomplish that. Magic functionThe simple way is to use the magic function to execute the ipython scripts in a notebook. The option -i will make it run in IPython’s namespace and the variables defined interactively are also included. 1%run -i 'notebook_with_shared_code.ipynb' ipynb package - py3 onlyThe package ipynb provides an easy way to explicitly import .pynb files the same way you would import regular .py file. However, this package depends on new machinery introduced in Python 3.4, so atleast for now there is no Python 2 support. 1pip install ipynb Full import All the code in the .ipynb file is executed, and classes/functions/variables in the top level are available for use. If you have a notebook file named server.ipynb, you can import it via: 12import ipynb.fs.full.serverfrom ipynb.fs.full.server import X, Y, X Definitions only import you only want to import the functions / classes defined in it - and not the extra statements you have in there. This can be accomplished via 1import ipynb.fs.defs.server It’ll only execute and make available the following parts of the code in server.ipynb: class / function definitions import statements Assignment statements where the variables being assigned to are ALL_CAPS (assumed to be constants). This skips most computational work and brings in your definitions only, making it easy to reuse functions / classes across similar analyses.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Config the terminal on Mac OS]]></title>
      <url>%2F2016%2F11%2Fconfig-mac%2F</url>
      <content type="text"><![CDATA[iTerm 2Start iTerm at login Open your “System Preferences” Navigate to “Users and Groups” Select your “Login Items” Click the plus sign to add a new login item (check the box ‘hide’. This way you won’t see the window pop up in your face, but it will be open in the background.) System wide hotkey for iTerm Navigate to the “Keys” settings page on iTerm preferences pane Set the hotkey “Show/hide iTerm2 with a system-wide hotkey” to whatever you want (eg ⌘+Esc). Keyboard shortcut Function Shortcut Show/hide iTerm2 ⌘ + ⌃ + t Toggle in/out fullscreen ⌘ + ↩ Maximize current panel ⌘ + ⇧ + ↩ Previous/Next tab ⌘ + ← / → Go to tab ⌘ + Number Go to window ⌘ + ⌥ + Number Go to split pane by order of use ⌘ + ] / [ Split window horizontally (same profile) ⌘ + D Split window vertically (same profile) ⌘ + d Close pane/window ⌘ + w Search (supports regular expression) ⌘ + f Auto-complete used command ⌘ + ; Display all tabs and search ⌘ + ⌥ + e Highlight mouse location ⌘ + / See iTerm 2 cheatsheet and iterm2有什么酷功能 for more shortcuts. Zsh and On-My-ZshRun brew install zsh to install Zsh, then change the default shell to zsh: add line /usr/local/bin/zsh to file /etc/shells run chsh -s /usr/local/bin/zsh then install oh-my-zsh ThemeI used the theme called Bullet Train. install Powerline compatible fonts, Vim Powerline patched fonts set both the regular font and the non-ascii font to Hack in iTerm2 download the theme, put the file bullet-train.zsh-theme in $ZSH_CUSTOM/themes/, then configure the theme in your ~/.zshrc file ZSH_THEME=”bullet-train” Auto-completionZsh can auto-complete file/folder path, commands, and arguments. For example, When the options popped up after the ⇥, hit the ⇥ again and you will be in selection mode. Hit ⇥ to next option, hit ⇧+⇥ to previous option, and use ⌃ + f/b/p/n to choose right/left/above/below option. GlobbingGlobbing means command line parameter expansion. For example ls *.html. You can sort and filter by exclusion or inclusion on name, size, permission, owner, creation time, etc. 123456789ls *(.) # list just regular filesls *(/) # list just directoriesls -ld *(/om[1,3]) # Show three newest directories. &quot;om&quot; orders by modification. &quot;[1,3]&quot; works like Python slice.rm -i *(.L0) # Remove zero length files, prompt for each filels *(^m0) # Files not modified today.subl **/main.py # Edit main.py, wherever it is in this directory tree. ** is great.ls **/*(.x) # List all executable files in this treels *~*.*(.) # List all files that does not have a dot in the filenamels -l */**(Lk+100) # List all files larger than 100kb in this tree Global aliasesGlobal aliases are words that can be used anywhere on the command line, thus you can give certain files, filters or pipes a short name. Some examples: 1alias -g NUL=&quot;&gt; /dev/null 2&gt;&amp;1&quot; Zsh also has suffix aliases, which means that you can tie a file suffix, let’s say “pdf” to a command, for example xpdf. alias -s pdf=xpdf Now if you just type the name of a pdf file, it will be displayed with xpdf. JumpIn Zsh, you can jump to a folder by simply typing in the folder path without the prefix cd, eg .. is the same as cd ../ Command d will list all folders you have visited in this session, and input the corresponding number can jump to that folder. 123456789$ d0 ~/Dropbox/Websites/hezx.github.io1 ~/Dropbox/Websites/hezx.github.io/source/_posts2 ~/Dropbox/Websites/hezx.github.io/source/images3 ~/Dropbox/Websites/hezx.github.io/source4 ~$ 2~/Dropbox/Websites/hezx.github.io/source/images HistoryThe history records in Zsh in shared among different sessions. The Zsh also supports hinted search (similar to ⌃+r in Bash). For example, type in command git and then use ↑/ ↓ can search among all previously used git commands. Awesome pluginsautosuggestionsIt suggests commands as you type, based on command history. Usage examples can be found here. 12git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestionsplugins=(zsh-autosuggestions) As you type commands, you will see a completion offered after the cursor in a muted gray color. If you press the → key with the cursor at the end of the buffer, it will accept the suggestion, replacing the contents of the command line buffer with the suggestion. More about Zsh or Oh-My-Zsh This post explains how powerful the oh-my-zsh is on file picking etc. This post lists the benefits from using Zsh instead of default Bash.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Build a bolg with Hexo]]></title>
      <url>%2F2016%2F11%2Fbuild-bolg-with-hexo%2F</url>
      <content type="text"><![CDATA[Installation Install Node.js (LTS v6.9.1) Install Hexo (hexo-cli@1.0.2) 1sudo npm install -g hexo-cli Initialize and install a few userful plugins. 1234567891011121314hexo initnpm install hexo-generator-index --savenpm install hexo-generator-archive --savenpm install hexo-generator-category --savenpm install hexo-generator-tag --savenpm install hexo-server --savenpm install hexo-deployer-git --savenpm install hexo-deployer-heroku --savenpm install hexo-deployer-rsync --savenpm install hexo-deployer-openshift --savenpm install hexo-renderer-marked@0.2 --savenpm install hexo-renderer-stylus@0.2 --savenpm install hexo-generator-feed@1 --savenpm install hexo-generator-sitemap@1 --save ConfigurationDepoly to Github PagesEdit _config.yml file 1234deploy: type: git repository: git@github.com:hezx/hezx.github.io.git branch: master and use the following command to depoly the blog 1hexo deploy Create tags/categories pages1hexo new page tags 12345title: tagsdate: 2016-11-25 21:52:48type: "tags"comments: false--- 1hexo new page categories 12345title: categoriesdate: 2016-11-25 21:52:48type: "categories"comments: false--- ThemeDownload the Next theme 1git clone https://github.com/iissnan/hexo-theme-next next Change the theme line in _config.yml as 1theme: next Details about how to config the theme can be found here. TODO: Now I used Local Search, a better approach is to setup the Swiftype engine (see this). ​]]></content>
    </entry>

    
  
  
</search>
